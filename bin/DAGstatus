#!/usr/bin/env python
"""
Code to present the DAGman status output in a more user-friendly manner.

Add this directory to your PATH to run DAGstatus.py from anywhere.
"""


from __future__ import print_function
import argparse
import logging
import os
from collections import OrderedDict, namedtuple
import json
import sys
PY3 = (sys.version_info.major == 3)


logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.INFO)
log = logging.getLogger(__name__)


def strip_comments(line):
    return line.replace("/*", "").replace("*/", "").strip()


def strip_doublequotes(line):
    return line.replace('"', '')


class TColors:
    """Handle terminal coloured output.
    Use TColors.COLORS['ENDC'] to stop the colour.

    Also returns colours based on job/DAG status, and for various other parts.

    e.g.:
    >>> print TColors.COLORS['GREEN'] + "It's not easy being green" + TColors.COLORS['ENDC']

    or better:

    TColors.printc("It's not easy being green", TColors.COLORS['GREEN'])
    """
    fmt_dict = {}
    with open(os.path.join(os.path.dirname(__file__), 'DAGstatus_config.json')) as js:
        fmt_dict = json.load(js)

    COLORS = fmt_dict['colors']
    for k, v in COLORS.items():
        if PY3:
            COLORS[k] = str(v).encode().decode('unicode_escape')
        else:
            COLORS[k] = str(v).decode('string_escape')
    STATUS_COLORS = fmt_dict['statuses']
    STATUS_DETAIL_COLORS = fmt_dict['detailed_statuses']
    FMT_COLORS = fmt_dict['formatting']

    @classmethod
    def printc(cls, text, color_code):
        """Print coloured output, and reset the colour after the output"""
        print(color_code + text + cls.COLORS['ENDC'])

    @classmethod
    def status_color(cls, status, status_detail=None):
        """Return color code based on status string.
        Preferntially uses status_detail if it exists.
        If no matching status string, returns end-color.
        """
        if status_detail in cls.fmt_dict['detailed_statuses'].keys():
            try:
                return ''.join([cls.COLORS[part.strip()] for part in cls.STATUS_DETAIL_COLORS[status_detail].split("+")])
            except KeyError:
                log.exception('Cannot find colour with name %s', cls.fmt_dict['detailed_statuses'][status_detail])
        if status in cls.fmt_dict['statuses'].keys():
            try:
                return ''.join([cls.COLORS[part.strip()] for part in cls.STATUS_COLORS[status].split("+")])
            except KeyError:
                log.exception('Cannot find colour with name %s', cls.fmt_dict['statuses'][status])
        else:
            return cls.COLORS['ENDC']

    @classmethod
    def formatting_color(cls, section):
        """Return color code based on section.
        If no matching section label, returns end-color.
        """
        if section in cls.FMT_COLORS.keys():
            try:
                return ''.join([cls.COLORS[part.strip()] for part in cls.FMT_COLORS[section].split("+")])
            except KeyError:
                log.exception('Cannot find colour with name %s', cls.FMT_COLORS[section])
        else:
            return cls.COLORS['ENDC']


def get_terminal_size():
    """Get width of current terminal, in pixels"""
    term_rows, term_columns = os.popen('stty size', 'r').read().split()
    return int(term_rows), int(term_columns)


# To hold info about a given line
Line = namedtuple('Line', 'key value comment')


class ClassAd(object):
    """Base class for ClassAds."""
    def __init__(self):
        pass


class DagStatus(ClassAd):
    """Class to describe status of DAG as a whole."""
    def __init__(self,
                 timestamp,
                 dag_status,
                 nodes_total,
                 nodes_done,
                 nodes_pre,
                 nodes_queued,
                 nodes_post,
                 nodes_ready,
                 nodes_unready,
                 nodes_failed,
                 job_procs_held,
                 job_procs_idle,
                 node_statuses=None):
        super(ClassAd, self).__init__()
        self.timestamp = timestamp
        self.dag_status = strip_doublequotes(dag_status)
        self.nodes_total = int(nodes_total)
        self.nodes_done = int(nodes_done)
        self.nodes_pre = int(nodes_pre)
        self.nodes_queued = int(nodes_queued)
        self.nodes_post = int(nodes_post)
        self.nodes_ready = int(nodes_ready)
        self.nodes_unready = int(nodes_unready)
        self.nodes_failed = int(nodes_failed)
        self.job_procs_held = int(job_procs_held)
        self.job_procs_idle = int(job_procs_idle)
        self.nodes_done_percent = "{0:.1f}".format(100. * self.nodes_done / self.nodes_total)
        self._job_procs_running = 0
        # self.job_procs_running = 0
        self.node_statuses = node_statuses if node_statuses else []

    @property
    def job_procs_running(self):
        return len([n for n in self.node_statuses
                    if n.node_status == "STATUS_SUBMITTED" and
                    n.status_details == "not_idle"])

    @property
    def nodes_running_percent(self):
        return "{0:.1f}".format(100. * self.job_procs_running / self.nodes_total)


class NodeStatus(ClassAd):
    """Class to describe state of individual job node in the DAG."""
    def __init__(self,
                 node,
                 node_status,
                 status_details,
                 retry_count,
                 job_procs_queued,
                 job_procs_held):
        super(NodeStatus, self).__init__()
        self.node = strip_doublequotes(node)
        self.node_status = strip_doublequotes(node_status)
        self.status_details = status_details.replace('"', '')
        self.retry_count = int(retry_count)
        self.job_procs_queued = int(job_procs_queued)
        self.job_procs_held = int(job_procs_held)


class StatusEnd(ClassAd):
    """Class to describe state of reporting."""
    def __init__(self,
                 end_time,
                 next_update):
        super(StatusEnd, self).__init__()
        self.end_time = strip_doublequotes(end_time)
        self.next_update = strip_doublequotes(next_update)


def process(status_filename, only_summary):
    """Main function to process the status file and print it on screen.

    Parameters
    ----------
    status_filename : str
        Name of status file to process.

    only_summary : bool
        If True, only prints out summary of DAG. Otherwise prints out info about
        each job in DAG.
    """
    dag_status, node_statuses, status_end = interpret_status_file(status_filename)
    print_table(status_filename, dag_status, node_statuses, status_end, only_summary)


def interpret_status_file(status_filename):
    """Interpret the DAG status file, return objects with DAG & node statuses.

    Parameters
    ----------
    status_filename : str
        Filename of status file to interpret.

    Returns
    -------
    DagStatus, list[NodeStatus], StatusEnd
        Objects with info abotu DAG, all nodes, and end info (update times).

    Raises
    ------
    KeyError
        If processing encounters block with unknown type
        (i.e. not DagStatus, NodeStatus or StatusEnd).
    """
    dag_status = None
    node_statuses = []
    status_end = None

    with open(status_filename) as sfile:
        contents = {}
        store_contents = False
        for line in sfile:
            if line.startswith("[") or "}" in line:
                store_contents = True
                continue
            elif line.startswith("]"):
                log.debug(contents)
                # do something with contents here, depending on Type key
                if contents['Type'].value == 'DagStatus':
                    dag_status = generate_DagStatus(contents)
                elif contents['Type'].value == 'NodeStatus':
                    node = generate_NodeStatus(contents)
                    node_statuses.append(node)
                elif contents['Type'].value == 'StatusEnd':
                    status_end = generate_StatusEnd(contents)
                else:
                    log.debug(contents)
                    log.debug(contents['Type'])
                    raise KeyError("Unknown block Type")
                contents = {}
                store_contents = False
                continue
            elif "{" in line:
                store_contents = False
                continue
            elif store_contents:
                # Actually handle the line
                line_parsed = interpret_line(line)
                contents[line_parsed.key] = line_parsed
    dag_status.node_statuses = node_statuses

    return dag_status, node_statuses, status_end


def interpret_line(line):
    """Interpret raw string corresponding to a line, then return as Line obj.

    Parameters
    ----------
    line : str
        Line to be interpreted.

    Returns
    -------
    Line
        Line object filled with key, value, and any comments.
    """
    raw = line.replace('\n', '').strip()
    parts = [x.strip() for x in raw.split('=')]
    other = [x.strip() for x in parts[1].split(";")]
    value = strip_doublequotes(other[0])
    if len(other) == 2:
        comment = strip_doublequotes(strip_comments(other[1]))
    else:
        comment = ''
    return Line(key=parts[0], value=value, comment=comment)


def generate_DagStatus(contents):
    """Create, fill, and return a DagStatus object with info in contents dict."""
    return DagStatus(timestamp=contents['Timestamp'].comment,
                     dag_status=contents['DagStatus'].comment,
                     nodes_total=contents['NodesTotal'].value,
                     nodes_done=contents['NodesDone'].value,
                     nodes_pre=contents['NodesPre'].value,
                     nodes_queued=contents['NodesQueued'].value,
                     nodes_post=contents['NodesPost'].value,
                     nodes_ready=contents['NodesReady'].value,
                     nodes_unready=contents['NodesUnready'].value,
                     nodes_failed=contents['NodesFailed'].value,
                     job_procs_held=contents['JobProcsHeld'].value,
                     job_procs_idle=contents['JobProcsIdle'].value)


def generate_NodeStatus(contents):
    """Create, fill, and return a NodeStatus object with info in contents dict."""
    return NodeStatus(node=contents['Node'].value,
                      node_status=contents['NodeStatus'].comment,
                      status_details=contents['StatusDetails'].value,
                      retry_count=contents['RetryCount'].value,
                      job_procs_queued=contents['JobProcsQueued'].value,
                      job_procs_held=contents['JobProcsHeld'].value)


def generate_StatusEnd(contents):
    """Create, fill, and return a StatusEnd object with info in contents dict."""
    return StatusEnd(end_time=contents['EndTime'].comment,
                     next_update=contents['NextUpdate'].comment)


def create_format_str(parts_dict, separator):
    """Create a format string out of parts_dict for use with .format()

    Parameters
    ----------
    parts_dict : dict[str, dict]

    Returns
    -------
    str
        String for use when formatting rows of table.
    """
    format_parts = ["{%d:<%d}" % (i, v["len"]) for i, v in enumerate(parts_dict.values())]
    format_str = separator.join(format_parts)
    return format_str


def print_table(status_filename, dag_status, node_statuses, status_end, only_summary):
    """Print a pretty-ish table with important info

    Parameters
    ----------
    status_filename : str
        Filename of status file

    dag_status : DagStatus
        Object holding info about overall status of DAG.

    node_statuses : list[NodeStatus]
        List of objects holding info about each job.

    status_end : StatusEnd
        Object holding info about reporting.

    only_summary : bool
        If True, only prints out summary of DAG. Otherwise prints out info about
        each job in DAG.
    """
    # Here we auto-create the formatting strings for each row,
    # and auto-size each column based on max size of contents
    separator = " | "

    # For info about each node:
    job_dict = OrderedDict()  # holds column title as key and dict of attr, field length, as value
    job_dict["Node"] = {"attr": "node", "len": 0}
    job_dict["Status"] = {"attr": "node_status", "len": 0}
    job_dict["Retries"] = {"attr": "retry_count", "len": 0}
    job_dict["Detail"] = {"attr": "status_details", "len": 0}
    # Auto-size each column - find maximum of column header and column contents
    for k, v in job_dict.items():
        job_dict[k]["len"] = max([len(str(getattr(s, v["attr"]))) for s in node_statuses] + [len(k)])

    job_format = create_format_str(job_dict, separator)

    total_length = (sum([v['len'] for v in job_dict.values()]) +
                    (len(separator) * (len(job_dict) - 1)))

    # If total width is too large for the terminal, we force it to fit by taking
    # away space from the node name column, but keeping at least 1 char.
    term_height, term_width = get_terminal_size()
    if total_length > term_width:
        job_dict["Node"]["len"] -= (total_length - term_width + 1)
        job_dict['Node']['len'] = max(job_dict['Node']['len'], 1)
    job_format = create_format_str(job_dict, separator)

    job_header = job_format.format(*job_dict.keys())

    # For info about summary of all jobs:
    summary_dict = OrderedDict()
    summary_dict["DAG Status"] = {"attr": "dag_status", "len": 0}
    summary_dict["Total"] = {"attr": "nodes_total", "len": 0}
    summary_dict["Queued"] = {"attr": "nodes_queued", "len": 0}
    summary_dict["Idle"] = {"attr": "job_procs_idle", "len": 0}
    summary_dict["Running"] = {"attr": "job_procs_running", "len": 0}
    summary_dict["Running %"] = {"attr": "nodes_running_percent", "len": 0}
    summary_dict["Failed"] = {"attr": "nodes_failed", "len": 0}
    summary_dict["Done"] = {"attr": "nodes_done", "len": 0}
    summary_dict["Done %"] = {"attr": "nodes_done_percent", "len": 0}
    for k, v in summary_dict.items():
        summary_dict[k]["len"] = max(len(str(getattr(dag_status, v["attr"]))), len(k))
    summary_format = create_format_str(summary_dict, separator)
    summary_header = summary_format.format(*summary_dict.keys())

    # Now figure out how many char columns to occupy for the *** and ---
    columns = len(summary_header) if only_summary else max(len(job_header), len(summary_header))
    columns += 1
    if columns > term_width:
        columns = term_width

    # Now actually print the table
    TColors.printc(status_filename, TColors.formatting_color('FILENAME'))

    if not only_summary:
        # Print info for each job.
        print("~" * columns)
        print(job_header)
        print("-" * columns)
        for n in node_statuses:
            # this is bloody awful
            TColors.printc(job_format.format(*[str(n.__dict__[v["attr"]])[0:v['len']] for v in job_dict.values()]),
                           TColors.status_color(n.node_status, n.status_details))
        print("-" * columns)
    # print summary of all jobs
    print("~" * columns)
    print(summary_header)
    print("-" * columns)
    TColors.printc(summary_format.format(*[str(getattr(dag_status, v["attr"]))[0:v['len']] for v in summary_dict.values()]),
                   TColors.status_color(dag_status.dag_status.split()[0]))
    if not only_summary:
        # print time of next update
        print("-" * columns)
        print("Status recorded at:", status_end.end_time)
        TColors.printc("Next update:        %s" % status_end.next_update,
                       TColors.formatting_color('NEXT_UPDATE'))
    print("~" * columns)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__,
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("-v", "--verbose",
                        help="enable debugging mesages",
                        action='store_true')
    parser.add_argument("-s", "--summary",
                        help="only printout very short summary of all jobs",
                        action='store_true')
    parser.add_argument("statusFile",
                        help="DAG status file(s), separated by spaces",
                        nargs="*")
    args = parser.parse_args()

    if args.verbose:
        log.setLevel(logging.DEBUG)

    if len(args.statusFile) == 0:
        parser.print_help()
        exit()

    for f in args.statusFile:
        process(f, args.summary)

    sys.exit(0)
